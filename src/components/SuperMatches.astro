---
import type { Match } from '../types';

const response = await fetch('https://rough-rice-35b5.maliagapacheco.workers.dev/?limit=100');
const matches = await response.json() as Match[];

// Initial filter for super matches
const superMatches = matches.filter(match => 
  match.tags && match.tags.some(tag => tag == 'super')
);

// We'll filter on the client side based on localStorage preference
---

<div class="max-w-5xl mx-auto px-4 py-12">
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-2xl font-light text-black">Super Matches</h1>
    <div class="flex items-center space-x-2">
      <label for="level10-filter" class="text-sm text-gray-700">Level 10 only</label>
      <div class="relative inline-block w-10 mr-2 align-middle select-none">
        <input type="checkbox" id="level10-filter" class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 border-gray-300 appearance-none cursor-pointer transition-transform duration-200 ease-in" />
        <label for="level10-filter" class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"></label>
      </div>
    </div>
  </div>
  
  <div id="matches-container">
    {superMatches.length > 0 ? (
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      {superMatches.map((match) => (
        <div class="bg-white rounded-md overflow-hidden hover:bg-gray-100 transition-all duration-300 border border-gray-200">
          <div class="px-4 py-3 flex justify-between items-center border-b border-gray-200">
            <div class="flex items-center space-x-3">
              <span class="text-black font-medium text-sm">{match.game.toUpperCase()}</span>
              <span class="w-1.5 h-1.5 rounded-full bg-black bg-opacity-30"></span>
              <span class="text-gray-600 text-sm">{match.region}</span>
            </div>
            <span class={`px-2 py-0.5 rounded-full text-xs ${match.status === 'LIVE' ? 'bg-black text-white' : 'bg-gray-200 text-black'}`}>
              {match.status}
            </span>
          </div>
          
          <div class="p-4">
            <details class="group">
              <summary class="flex justify-between items-center cursor-pointer list-none">
                <div class="flex items-center space-x-4">
                  <div class="text-black font-medium">{match.teams.faction1.name}</div>
                  <div class="text-gray-500">vs</div>
                  <div class="text-black font-medium">{match.teams.faction2.name}</div>
                </div>
                <svg class="w-5 h-5 text-gray-500 group-open:rotate-180 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </summary>
              
              <div class="mt-4 pt-4 border-t border-gray-200">
                <div class="grid grid-cols-2 gap-4">
                  {/* Team 1 */}
                  <div data-team="1">
                    <div class="flex justify-between items-center mb-2">
                      <span class="text-black text-sm font-medium">{match.teams.faction1.name}</span>
                      <span class="text-xs text-gray-600">Avg: {match.teams.faction1.stats.skillLevel.average}</span>
                    </div>
                    
                    <ul class="space-y-1.5">
                      {match.teams.faction1.roster.map((player) => (
                        <li class="flex justify-between items-center">
                          <span class="text-gray-700 text-sm">{player.nickname}</span>
                          <span class="text-xs text-gray-600">
                            {player.elo}
                          </span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  {/* Team 2 */}
                  <div data-team="2">
                    <div class="flex justify-between items-center mb-2">
                      <span class="text-black text-sm font-medium">{match.teams.faction2.name}</span>
                      <span class="text-xs text-gray-600">Avg: {match.teams.faction2.stats.skillLevel.average}</span>
                    </div>
                    
                    <ul class="space-y-1.5">
                      {match.teams.faction2.roster.map((player) => (
                        <li class="flex justify-between items-center">
                          <span class="text-gray-700 text-sm">{player.nickname}</span>
                          <span class="text-xs text-gray-600">
                            {player.elo}
                          </span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
                
                <!-- Tags section removed as requested -->
              </div>
            </details>
          </div>
        </div>
      ))}
    </div>
  ) : (
    <div class="bg-white p-6 rounded-md text-center border border-gray-200">
      <p class="text-gray-700">No super matches found at the moment.</p>
    </div>
  )}
  </div>
</div>

<style>
  /* Set white background for the page */
  :global(body) {
    background-color: #ffffff;
    color: black;
  }
  
  /* Remove default details marker */
  details summary::-webkit-details-marker {
    display: none;
  }
  
  /* Toggle switch styling */
  .toggle-checkbox:checked {
    transform: translateX(0.75rem);
    border-color: black;
  }
  
  .toggle-checkbox:checked + .toggle-label {
    background-color: black;
  }
</style>

<script>
  // Client-side JavaScript for filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    const toggleCheckbox = document.getElementById('level10-filter');
    const matchesContainer = document.getElementById('matches-container');
    const allMatches = [...document.querySelectorAll('#matches-container > div > div')];
    
    // Load preference from localStorage
    const isLevel10Only = localStorage.getItem('level10Only') === 'true';
    toggleCheckbox.checked = isLevel10Only;
    
    // Apply initial filter if needed
    if (isLevel10Only) {
      applyLevel10Filter();
    }
    
    // Toggle filter when checkbox changes
    toggleCheckbox.addEventListener('change', () => {
      localStorage.setItem('level10Only', toggleCheckbox.checked);
      
      if (toggleCheckbox.checked) {
        applyLevel10Filter();
      } else {
        // Show all super matches
        allMatches.forEach(match => {
          match.style.display = '';
        });
        
        // Update empty state message if needed
        updateEmptyState();
      }
    });
    
    function applyLevel10Filter() {
      let visibleCount = 0;
      
      allMatches.forEach(match => {
        // Check if both teams have average skill level of 10
        const team1Avg = parseFloat(match.querySelector('[data-team="1"] .text-xs.text-gray-600').textContent.replace('Avg: ', ''));
        const team2Avg = parseFloat(match.querySelector('[data-team="2"] .text-xs.text-gray-600').textContent.replace('Avg: ', ''));
        
        if (team1Avg === 10 && team2Avg === 10) {
          match.style.display = '';
          visibleCount++;
        } else {
          match.style.display = 'none';
        }
      });
      
      // Update empty state message if needed
      updateEmptyState();
    }
    
    function updateEmptyState() {
      const visibleMatches = [...allMatches].filter(match => match.style.display !== 'none');
      const emptyStateElement = document.querySelector('.bg-white.p-6.rounded-md.text-center');
      
      if (visibleMatches.length === 0 && !emptyStateElement) {
        // Create empty state message if no matches are visible
        const emptyState = document.createElement('div');
        emptyState.className = 'bg-white p-6 rounded-md text-center border border-gray-200';
        emptyState.innerHTML = `<p class="text-gray-700">${toggleCheckbox.checked ? 'No level 10 super matches found.' : 'No super matches found at the moment.'}</p>`;
        
        // Clear the container and add empty state
        const gridContainer = document.querySelector('.grid');
        if (gridContainer) {
          gridContainer.replaceWith(emptyState);
        } else if (!document.querySelector('.bg-white.p-6')) {
          matchesContainer.innerHTML = '';
          matchesContainer.appendChild(emptyState);
        }
      } else if (visibleMatches.length > 0 && emptyStateElement) {
        // Remove empty state and restore grid if matches become visible
        const gridContainer = document.createElement('div');
        gridContainer.className = 'grid grid-cols-1 md:grid-cols-2 gap-6';
        
        visibleMatches.forEach(match => {
          gridContainer.appendChild(match.cloneNode(true));
        });
        
        emptyStateElement.replaceWith(gridContainer);
      }
    }
  });
</script>